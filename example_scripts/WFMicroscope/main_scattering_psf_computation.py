"""
Example script of WaveBlocks framework.
This script uses a compares the PSF generated by the Gibs-Lani implementation against 
the wave propagation method, that takes the PSF computed at a far away point and propagates
it using a WavePropagation block.
This example also computes the scattering in the media and the corresponding aberrated PSF.

Josue Page
josue.page@tum.de
16/03/2021, Munich, Germany
"""
import waveblocks as ob
import torch
import torch.nn.functional as F
import numpy as np
import matplotlib.pyplot as plt
import time


# Load PSF and optics information from file
# psfFile = tables.open_file('config_files/psfLF_40_M__-27.9_9_17.1_depths__0_ths.h5', "r", driver="H5FD_CORE")
# Load PSF and arrange it as [1,nDepths,x,y,2], the last dimension stores the complex data 
# psfMatlab = torch.tensor(psfFile.root.PSFWaveStack, dtype=torch.float32, requires_grad=True).permute(1,3,2,0).unsqueeze(0).contiguous()


# Optical Parameters
# nDepths = psfFile.root.nDepths
depth_step = 50#psfFile.root.depthStep
depth_range = [-200,200]#psfFile.root.depthRange
depths = -np.arange(depth_range[0], depth_range[1]+depth_step, depth_step)
nDepths = len(depths)
# Remove the last depth
# depths = depths[:-1]
nDepths = len(depths)
# vol_xy_size = 251
subsampling = 0.7

# setup labels for plotting
nLabels = 5
depths_ticks_labels = [str(d) for d in depths]
depths_ticks_labels = depths_ticks_labels[::int(nDepths/nLabels)]
depths_ticks_positions = np.linspace(0, 200, len(depths_ticks_labels)).astype(int)

# Configuration parameters
maxVolume = 1
output_path = './runs/PSF_estimation/'
plot = True
# Fetch Device to use
device = torch.device("cuda:1" if torch.cuda.is_available() else "cpu")

# Create opticalConfig object with the information from the microscope
opticalConfig = ob.OpticConfig()

# Update optical config from input PSF
# psf_size = opticalConfig.Nnum[0] * 9
opticalConfig.PSF_config.NA = 0.2#psfFile.root.NA[0]
opticalConfig.PSF_config.M = 16.0#float(psfFile.root.M[0])
opticalConfig.PSF_config.Ftl = 165000
opticalConfig.PSF_config.wvl = 0.65
opticalConfig.PSF_config.ni = 1
opticalConfig.PSF_config.fobj = opticalConfig.PSF_config.Ftl/opticalConfig.PSF_config.M

# Reinit opticalConfig to update k
opticalConfig = ob.OpticConfig(opticalConfig.PSF_config)

# Camera                                     
opticalConfig.sensor_pitch = 10 #psfFile.root.sensorRes[0]
opticalConfig.useRelays = False
# MLA
opticalConfig.useMLA = True
opticalConfig.MLAPitch = 112
opticalConfig.Nnum = 2 * [opticalConfig.MLAPitch//opticalConfig.sensor_pitch]
opticalConfig.Nnum = [int(n + (1 if (n%2 == 0) else 0)) for n in opticalConfig.Nnum]
opticalConfig.mla2sensor = 2500
opticalConfig.fm = 2500

sigma_x=0.6*opticalConfig.PSF_config.wvl # this determines g. to obtain the relation between g and sigma_x, use BPM_Estimating_g
seed_density = opticalConfig.PSF_config.wvl/4 #phase seed density, 
# sigma_x *= opticalConfig.PSF_config.M
# seed_density *= opticalConfig.PSF_config.M
ls=100  # scattering mean free path

# M * NA^2
psf_size = 4095#psfMatlab.shape[2]

# Define PSF
PSF = ob.PSF(opticalConfig)

# Compute PSF and measure time
start = time.time()
_,psfIn = PSF.forward(opticalConfig.sensor_pitch/opticalConfig.PSF_config.M, psf_size, depths)
end = time.time()

time_lanni = end-start

# psf_size = round(psfMatlab.shape[2] * opticalConfig.PSF_config.M / float(psfFile.root.M[0])) + 1

start = time.time()
waveProp = ob.WavePropagation(
            optic_config=opticalConfig,
            members_to_learn=[],
            sampling_rate=opticalConfig.sensor_pitch,
            shortest_propagation_distance=-depth_step*opticalConfig.PSF_config.M**2,
            field_length=psf_size,
            allow_max_sampling=True
        )

PSF_scatter = ob.PSFScatter(opticalConfig, depths, psf_size)
_,wave_prop_psf = PSF_scatter.forward(opticalConfig.sensor_pitch/opticalConfig.PSF_config.M, psf_size, depths)

end = time.time()

time_prop = end-start


print('Gibson-Lanni time for ' + str(nDepths) + ' depths: ' + str(time_lanni) + ' seconds')
print('Wave Prop time for ' + str(nDepths) + ' depths: ' + str(time_prop) + ' seconds')



psfCrop = 300
absLaniPSF = psfIn[:,:, psfIn.shape[2]//2-psfCrop//2 : psfIn.shape[2]//2+psfCrop//2, psfIn.shape[2]//2-psfCrop//2 : psfIn.shape[2]//2+psfCrop//2].contiguous().abs()**2
absPSFProp = wave_prop_psf[:,:, psfIn.shape[2]//2-psfCrop//2 : psfIn.shape[2]//2+psfCrop//2, psfIn.shape[2]//2-psfCrop//2 : psfIn.shape[2]//2+psfCrop//2].contiguous().abs()**2

otfProp = torch.log(ob.batch_fftshift3d_real(ob.compute_OTF(absPSFProp).abs()))
otfLani = torch.log(ob.batch_fftshift3d_real(ob.compute_OTF(absLaniPSF).abs()))



for d in range(nDepths):
    absLaniPSF[:,d,...] /= absLaniPSF[:,d,...].sum()
    absPSFProp[:,d,...] /= absPSFProp[:,d,...].sum()

absLaniPSF = torch.log(absLaniPSF)
absPSFProp = torch.log(absPSFProp)

psfDiff = (absPSFProp-absLaniPSF).abs()

plt.figure(figsize=(7,7))
nDepthsDisplay = nDepths//5
# for nD in range(0,nDepthsDisplay):
#     nD2 = nD*2
#     plt.subplot(2,nDepthsDisplay+2,nD+1)
#     plt.imshow(otfLani[0,nD2,...].detach().cpu().numpy())
#     titleString = "{:.2f}".format(depths[nD2])
#     if nD==0:
#         titleString = 'PSF Gi-La, depth:\n ' + titleString
#     # plt.title('PSF Gi-La, depth: ' + "{:.2f}".format(depths[nD]))
#     plt.title(titleString)
#     # plt.subplot(4,nDepthsDisplay+1,nDepthsDisplay+1+nD+1)
#     # plt.imshow(absPSFMatlab[0,nD,...].detach().cpu().numpy())
#     # plt.title('PSF Broxton')

#     plt.subplot(2,nDepthsDisplay+2,1*(nDepthsDisplay+2)+nD+1)
#     plt.imshow(otfProp[0,nD2,...].detach().cpu().numpy())
    
#     if nD==0:
#         plt.title('PSF Wave Propagation')

#     # plt.subplot(2,nDepthsDisplay+2,2*(nDepthsDisplay+2)+nD+1)
#     # plt.imshow(psfDiff[0,nD2,...].detach().cpu().numpy())
#     # plt.title('abs diff: ' + "{:.2f}".format(psfDiff[:,nD2,...].sum().item()))

def interpolate_side(img,size=[200,200]):
    if size is None:
        size = img.shape[-2:]
    return F.interpolate(img.permute(0,2,1,3),size).max(0)[0].max(0)[0]



plt.subplot(2,2,1)#nDepthsDisplay+2,nDepthsDisplay+1)
plt.imshow(interpolate_side(absLaniPSF).detach().cpu().numpy())
plt.ylabel('z in um')
plt.xlabel('x')
plt.yticks(depths_ticks_positions,depths_ticks_labels)
plt.xticks([],[])
plt.title('PSF Gi-La, depth: ZX psf. wvl: ' + str(opticalConfig.PSF_config.wvl))
plt.subplot(2,2,2)#nDepthsDisplay+2,nDepthsDisplay+2)
# plt.imshow((interpolate_side(otfLani)).detach().cpu().numpy())
plt.imshow(otfLani[0,:,150,...].detach().cpu().numpy())
plt.ylabel('fz')
plt.xlabel('fx')
plt.yticks([],[])
plt.xticks([],[])

plt.title('MTF')

plt.subplot(2,2,3)#nDepthsDisplay+2,2*(nDepthsDisplay+2)-1)
plt.imshow(interpolate_side(absPSFProp).detach().cpu().numpy())
plt.title('PSF Wave Propagation: ZX psf')
plt.ylabel('z in um')
plt.xlabel('x')
plt.yticks(depths_ticks_positions,depths_ticks_labels)
plt.xticks([],[])
plt.subplot(2,2,4)#nDepthsDisplay+2,2*(nDepthsDisplay+2))
# plt.imshow((interpolate_side(otfProp)).detach().cpu().numpy())
plt.imshow(otfProp[0,:,150,:].detach().cpu().numpy())
plt.ylabel('fz')
plt.xlabel('fx')
plt.yticks([],[])
plt.xticks([],[])
plt.title('MTF')

# plt.subplot(2,nDepthsDisplay+2,3*(nDepthsDisplay+2)-1)
# plt.imshow(interpolate_side((absPSFProp-absLaniPSF).abs()).detach().cpu().numpy())
# plt.title('ZX psf diff')
# plt.subplot(2,nDepthsDisplay+2,3*(nDepthsDisplay+2))
# plt.imshow(interpolate_side((otfProp-otfLani).abs()).detach().cpu().numpy())
# plt.title('ZX otf diff')

# plt.subplot(2,7, 3*7)
# plt.imshow(waveProp.debug.detach().cpu().numpy())
plt.savefig('outputs/PSF_scattering_test_depths_' + str(int(min(depths))) + '_' + str(int(max(depths))) + '_wvl_' + str(opticalConfig.PSF_config.wvl) + '.png')
plt.show()
